<?php

namespace App\Http\Controllers;

use App\Models\Animator;
use App\Http\Requests\StoreAnimatorRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Illuminate\Support\Facades\Log;

class AnimatorController extends Controller
{
    /**
     * –†–µ–¥–∏—Ä–µ–∫—Ç —Å /animators ‚Üí –Ω–∞ –≥–ª–∞–≤–Ω—É—é
     */
    public function index()
    {
        return redirect('/');
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–≤ (—Ñ–∏–ª—å—Ç—Ä—ã)
     */
    public function home()
    {
        $query = Animator::query();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–ø—Ä–æ—Å–∞
        if (request()->filled('city')) {
            $query->where('city', request('city'));
        }
        if (request()->filled('min_price')) {
            $query->where('price', '>=', request('min_price'));
        }
        if (request()->filled('max_price')) {
            $query->where('price', '<=', request('max_price'));
        }
        if (request()->has('is_online')) {
            $query->where('is_online', filter_var(request('is_online'), FILTER_VALIDATE_BOOLEAN));
        }
        if (request()->has('is_verified')) {
            $query->where('is_verified', filter_var(request('is_verified'), FILTER_VALIDATE_BOOLEAN));
        }
        if (request()->filled('type')) {
            $query->where('type', request('type'));
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π
        $cards = $query->get()->map(function ($card) {
            $imageDir = public_path("images/cards/{$card->id}");
            $images = [];

            if (is_dir($imageDir)) {
                $main = "main.jpg";
                if (file_exists($imageDir . DIRECTORY_SEPARATOR . $main)) {
                    $images[] = asset("images/cards/{$card->id}/{$main}");
                }

                $files = collect(\Illuminate\Support\Facades\File::files($imageDir))
                    ->filter(fn($f) => preg_match('/\.(jpg|jpeg|png)$/i', $f->getFilename()) && $f->getFilename() !== 'main.jpg')
                    ->sortBy(fn($f) => $f->getFilename());

                foreach ($files as $file) {
                    $images[] = asset("images/cards/{$card->id}/" . $file->getFilename());
                }
            }

            $card->images = is_array($images) ? $images : [];
            return $card;
        });

        return Inertia::render('Home', [
            'cards'   => $cards,
            'filters' => request()->all(),
            'cities'  => Animator::select('city')->distinct()->pluck('city')->toArray(),
        ]);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    public function create()
    {
        return Inertia::render('Animators/Create');
    }

    /**
     * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—á–µ—Ä–Ω–æ–≤–∏–∫ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å)
     */
    public function store(Request $request)
    {
        // üìù –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Log::info('üì• –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', $request->all());

        try {
            // üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            $validated = $request->validate([
                // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                'details.title'       => 'required|string|max:255',
                'details.description' => 'nullable|string',
                
                // –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
                'workFormat.specialization'   => 'nullable|string|max:255',
                'workFormat.type'             => 'nullable|string|max:100',
                'workFormat.clients'          => 'nullable|array',
                'workFormat.workFormats'      => 'nullable|array', 
                'workFormat.serviceProviders' => 'nullable|array',
                'workFormat.experience'       => 'nullable|string|max:100',
                
                // –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
                'priceList.priceItems' => 'nullable|array',
                'priceList.priceItems.*.name' => 'string|max:255',
                'priceList.priceItems.*.price' => 'nullable|numeric|min:0',
                'priceList.priceItems.*.unit' => 'nullable|string|max:50',
                'priceList.priceItems.*.duration' => 'nullable|string|max:50',
                
                // –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–Ω–∞
                'price.value' => 'nullable|numeric|min:0',
                'price.unit'  => 'nullable|string|max:50',
                'price.isBasePrice' => 'nullable|boolean',
                
                // –ê–∫—Ü–∏–∏
                'actions.discount' => 'nullable|numeric|min:0|max:100',
                'actions.gift'     => 'nullable|string|max:500',
                
                // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
                'geo.city'       => 'nullable|string|max:255',
                'geo.address'    => 'nullable|string|max:500',
                'geo.visitType'  => 'nullable|string|in:no_visit,all_city,zones',
                
                // –ö–æ–Ω—Ç–∞–∫—Ç—ã
                'contacts.phone'       => 'nullable|string|max:20',
                'contacts.email'       => 'nullable|email|max:255',
                'contacts.contactWays' => 'nullable|array',
                
                // –û–±–∑–æ—Ä
                'review.text' => 'nullable|string',
                
                // –°—Ç–∞—Ç—É—Å
                'status' => 'nullable|string|in:draft,pending,published',
            ]);

            Log::info('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', $validated);

            // üìã –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ "draft"
            $status = $validated['status'] ?? 'draft';

            // üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            $animatorData = [
                'user_id'     => Auth::id(),
                'title'       => $validated['details']['title'],
                'description' => $validated['details']['description'] ?? '',
                'price'       => $validated['price']['value'] ?? null,
                'city'        => $validated['geo']['city'] ?? '',
                'address'     => $validated['geo']['address'] ?? '',
                'phone'       => $validated['contacts']['phone'] ?? '',
                'email'       => $validated['contacts']['email'] ?? '',
                'specialization' => $validated['workFormat']['specialization'] ?? '',
                'status'      => $status,
                
                // üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON –ø–æ–ª—è—Ö
                'work_format'  => $validated['workFormat'] ?? [],
                'price_list'   => $validated['priceList'] ?? [],
                'actions_data' => $validated['actions'] ?? [],
                'geo_data'     => $validated['geo'] ?? [],
                'contacts_data'=> $validated['contacts'] ?? [],
            ];

            Log::info('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', $animatorData);

            // üíæ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            $animator = Animator::create($animatorData);

            Log::info('üéâ –ê–Ω–∏–º–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: ' . $animator->id);

            // üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            $message = $status === 'draft' 
                ? '–ß–µ—Ä–Ω–æ–≤–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' 
                : '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ';

            // üîÑ –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
            return redirect()->route('profile.items', [
                'tab'    => $status === 'draft' ? 'draft' : 'published',
                'filter' => 'all'
            ])->with('success', $message);

        } catch (\Illuminate\Validation\ValidationException $e) {
            Log::error('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', $e->errors());
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º—É
            return back()->withErrors($e->errors())->withInput();
            
        } catch (\Exception $e) {
            Log::error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞: ' . $e->getMessage());
            Log::error('üîç Stack trace: ' . $e->getTraceAsString());
            
            return back()->with('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
}