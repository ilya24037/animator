<?php
// check-project-status.php
// –ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞: php check-project-status.php

require_once 'vendor/autoload.php';
$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

echo "üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–ï–ö–¢–ê\n";
echo "==============================\n\n";

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
echo "üìã 1. –°–û–°–¢–û–Ø–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô:\n";
$migrations = DB::table('migrations')->orderBy('batch')->get();
$lastBatch = $migrations->max('batch');
echo "–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: " . $migrations->count() . "\n";
echo "–ü–æ—Å–ª–µ–¥–Ω–∏–π batch: " . $lastBatch . "\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
$duplicates = [];
foreach ($migrations as $m1) {
    foreach ($migrations as $m2) {
        if ($m1->id < $m2->id && 
            strpos($m1->migration, 'add_user_id_and_status') !== false && 
            strpos($m2->migration, 'add_user_id_and_status') !== false) {
            $duplicates[] = [$m1->migration, $m2->migration];
        }
    }
}

if (count($duplicates) > 0) {
    echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–∏–≥—Ä–∞—Ü–∏–∏:\n";
    foreach ($duplicates as $dup) {
        echo "   - " . $dup[0] . "\n";
        echo "   - " . $dup[1] . "\n";
    }
} else {
    echo "‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n";
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã animators
echo "\nüìã 2. –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ ANIMATORS:\n";
if (Schema::hasTable('animators')) {
    $columns = Schema::getColumnListing('animators');
    echo "–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: " . count($columns) . "\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
    $requiredFields = [
        'user_id', 'status', 'city_id', 'about', 'zones', 
        'services', 'heroes', 'quick_booking', 'terms_accepted'
    ];
    
    echo "\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:\n";
    foreach ($requiredFields as $field) {
        if (in_array($field, $columns)) {
            echo "‚úÖ $field - –µ—Å—Ç—å\n";
        } else {
            echo "‚ùå $field - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n";
        }
    }
} else {
    echo "‚ùå –¢–∞–±–ª–∏—Ü–∞ animators –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n";
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
echo "\nüìã 3. –§–ê–ô–õ–´ –ú–ò–ì–†–ê–¶–ò–ô:\n";
$migrationFiles = glob('database/migrations/*.php');
$problemFiles = [];

foreach ($migrationFiles as $file) {
    $filename = basename($file);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if (strpos($filename, '184628_add_user_id_and_status') !== false ||
        strpos($filename, '000001_add_is_online_and_verified') !== false ||
        strpos($filename, '112246_add_is_online_and_verified') !== false) {
        $problemFiles[] = $filename;
    }
}

if (count($problemFiles) > 0) {
    echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n";
    foreach ($problemFiles as $file) {
        echo "   ‚ùå $file\n";
    }
} else {
    echo "‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n";
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
echo "\nüìã 4. –ú–û–î–ï–õ–ò:\n";
$models = ['Animator', 'Item', 'Ad', 'Card', 'Media'];
foreach ($models as $model) {
    $path = "app/Models/{$model}.php";
    if (file_exists($path)) {
        $count = DB::table(strtolower($model) . 's')->count();
        echo "‚úÖ $model - –Ω–∞–π–¥–µ–Ω–∞ (–∑–∞–ø–∏—Å–µ–π: $count)\n";
    } else {
        echo "‚ùå $model - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
    }
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ–∞–π–ª–æ–≤
echo "\nüìã 5. JAVASCRIPT –§–ê–ô–õ–´:\n";
$jsFiles = [
    'resources/js/Stores/useLocationStore.js' => 'localStorage',
    'resources/js/Pages/Animators/Create.vue' => 'axios',
    'resources/js/bootstrap.js' => 'axios'
];

foreach ($jsFiles as $file => $searchFor) {
    if (file_exists($file)) {
        $content = file_get_contents($file);
        if (strpos($content, $searchFor) !== false) {
            echo "‚ö†Ô∏è  $file - —Å–æ–¥–µ—Ä–∂–∏—Ç '$searchFor'\n";
        } else {
            echo "‚úÖ $file - –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '$searchFor'\n";
        }
    } else {
        echo "‚ùå $file - –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
    }
}

// 6. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo "\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
echo "1. –£–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ database/migrations\n";
echo "2. –ó–∞–º–µ–Ω–∏—Ç–µ localStorage –Ω–∞ cookies –≤ useLocationStore.js\n";
echo "3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π Animator/Item/Ad –≤ –æ–¥–Ω—É –º–æ–¥–µ–ª—å Listing\n";
echo "4. –ó–∞–º–µ–Ω–∏—Ç–µ axios –Ω–∞ Inertia router –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n";
echo "5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'php artisan migrate:status' –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n";

echo "\n‚ú® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";